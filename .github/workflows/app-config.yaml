name: Extract application configuration
on:
  push:
    branches:
      - 'feature/*'
jobs:
  config:
    name: Prepare configuration
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.extract-config.outputs.config }}
      java-version: ${{ fromJson(steps.extract-config.outputs.config).java.version }}
      java-architecture: ${{ fromJson(steps.extract-config.outputs.config).java.architecture }}
      java-directory: ${{ fromJson(steps.extract-config.outputs.config).java.directory }}
      java-package: ${{ fromJson(steps.extract-config.outputs.config).java.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract project configuration
        id: extract-config
        run: |
          echo "config=$(jq -c '.' '.github/app-config.json')" >> "$GITHUB_OUTPUT"
  config-attribute-not-provided:
    name: Prepare configuration when attribute not provided
    runs-on: ubuntu-latest
    outputs:
      react-version: ${{ fromJson(steps.extract-config.outputs.react_config).react.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Preparation
        run: jq -c '.react' '.github/empty.json'
      - name: Extract project configuration
        id: extract-config
        run: |
          echo "react_config=$(jq -c '.react' '.github/app-config.json')" >> "$GITHUB_OUTPUT"
      - name: Check nullability
        run: |
          echo react config nullablity ${{ steps.extract-config.outputs.react_config == null }}
          echo react config nullablity ${{ steps.extract-config.outputs.react_config == '' }}
          echo react config nullablity ${{ steps.extract-config.outputs.react_config == 'null' }}
          echo react config value ${{ steps.extract-config.outputs.react_config }}
          echo react config value "${{ steps.extract-config.outputs.react_config }}"         
          echo react config json "${{ toJson(steps.extract-config.outputs.react_config) }}"         
          if [ -z "${{ steps.extract-config.outputs.react_config }}" ]; then
            echo "Configuration not provided"
            exit 1
          fi      
  config-file-not-provided:
    name: Prepare configuration when file not provided
    runs-on: ubuntu-latest
    outputs:
        java-version: ${{ fromJson(steps.extract-config.outputs.config).java.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract project configuration
        id: extract-config
        run: |
            echo "config=$(jq -c '.' '.github/empty.json')" >> "$GITHUB_OUTPUT"
      - name: Check nullability
        run: |
          if [ -z "${{ steps.extract-config.outputs.config }}" ]; then
            echo "Configuration not provided"
            exit 1
          fi
      - name: Continue with default configuration
        run: |
          echo "Continue with default configuration"
  evaluate:
    name: Evaluate configuration
    runs-on: ubuntu-latest
    needs: 
      - config
      - config-attribute-not-provided
      - config-file-not-provided
    steps:
      - name: Print configuration
        run: |
          echo ${{ needs.config.outputs.java-version }}
          echo ${{ needs.config.outputs.java-architecture }}
          echo ${{ needs.config.outputs.java-directory }}
          echo ${{ needs.config.outputs.java-package }}
      - name: Print configuration when attribute not provided
        run: |
          echo ${{ needs.config-attribute-not-provided.outputs.react-version }}
      - name: Print configuration when file not provided
        run: |
          echo ${{ needs.config-file-not-provided.outputs.java-version }} 